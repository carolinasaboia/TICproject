#include "Arduino_SensorKit.h"

//GSR
const int GSR = A1;
int gsrValue = 0;
int gsr_average = 0;
int Serial_calibration_gsr = 465;  //valor de calibração - quando o sensor não está a ser utilizado
float stress;

//ECG
const int ecg = A0;
float threshold = 0.4;
float ecgVolts = 0;
float ecgHighPass = 0;
float ecgLowPass = 0;
float ecgFiltered = 0;
float ecgValue = 0;


// Filtros - constantes calibradas com testes
float hp_alpha = 0.995;
float lp_alpha = 0.3;
float hp_prev_input = 0;
float hp_prev_output = 0;


// BPM
unsigned long lastPeakTime = 0;
unsigned long currentTime = 0;
int bpm = 0;
bool peakDetected = false;
float lastValue = 0;

void setup() {
  // inicialização da comunicação serial:
  Serial.begin(9600);
  pinMode(10, INPUT);  // LO+
  pinMode(11, INPUT);  // LO -

  // inicialização do ecrã OLED
  Oled.begin();
  Oled.setFlipMode(true);
  Oled.setFont(u8x8_font_chroma48medium8_r);
}

void loop() {

  // leituras GSR
  gsrValue = analogRead(GSR);

  // leituras ECG

  // garantia que os elétrodos estão bem conectados
  if ((digitalRead(10) == 1) || (digitalRead(11) == 1)) {
    Serial.println('Eletrodos mal conectados');

    Oled.clear();

    Oled.setCursor(1, 1);
    Oled.print("Eletrodos mal");
    Oled.setCursor(1, 2);
    Oled.print("conectados...");

    Oled.refreshDisplay();
    delay(500);  // dá tempo ao OLED de atualizar a informação

  } else {
    // envia o valor do input analógico
    ecgValue = analogRead(ecg);
    ecgVolts = ecgValue * 5.0 / 1024.0;  // converte bits em volts

    // Filtro Passa-alto - remove componentes de baixa frequência
    ecgHighPass = hp_alpha * (hp_prev_output + ecgVolts - hp_prev_input);
    hp_prev_input = ecgVolts;
    hp_prev_output = ecgHighPass;

    // Filtro Passa-baixo - remove componentes de alta frequência
    ecgFiltered = lp_alpha * ecgHighPass + (1 - lp_alpha) * ecgLowPass;
    ecgLowPass = ecgFiltered;
    unsigned long current_time = millis();  // start timer

    // deteção de picos para contabilizar batimentos cardíacos
    if (ecgFiltered > threshold && !peakDetected && ecgFiltered > lastValue) {
      unsigned long interval = current_time - lastPeakTime;
      if (interval > 300) {  // Ignora picos com menos de 300ms de intervalo
        bpm = 60000 / interval;
        lastPeakTime = current_time;
        Serial.print("GSR: ");
        Serial.print(gsrValue);
        Serial.print(" | BPM: ");
        Serial.print(bpm);
        stress = calcularStress(gsrValue, bpm);
        Serial.print(" | Stress: ");
        Serial.println(stress);
        if (stress > 50.0) {
          Serial.println("AVISO: nível de stress muito elevado!");
        }

        // Display OLED
        Oled.clear();

        Oled.setCursor(1, 1);
        Oled.print("BPM:");
        Oled.setCursor(6, 1);
        Oled.print(bpm);

        Oled.setCursor(1, 2);
        Oled.print("GSR:");
        Oled.print(gsrValue);

        Oled.setCursor(1, 3);
        Oled.print("Stress:");
        Oled.print(stress);
        Oled.print("%");

        //Aviso de stress elevado caso seja superior a 50%
        if (stress > 50.0) {
          Oled.setCursor(1, 5);
          Oled.print("AVISO: nivel de");
          Oled.setCursor(1, 6);
          Oled.print("stress elevado!");
        }

        Oled.refreshDisplay();
        delay(500);
      }
      peakDetected = true;

    } else if (ecgFiltered < threshold - 0.05) {
      peakDetected = false;  // Faz reset para próxima deteção
    }
  }
  //Previne saturação
  delay(1);
}

float calcularStress(int gsrRaw, int bpm) {
  // Parâmetros de calibração
  int HR_min = 40;
  int HR_max = 200;
  int GSR_min = 300;
  int GSR_max = 500;

  int HR = bpm;
  float HR_norm = constrain((float)(HR - HR_min) / (HR_max - HR_min), 0.0, 1.0);

  float GSR_norm = constrain((float)(gsrRaw - GSR_min) / (GSR_max - GSR_min), 0.0, 1.0);

  float alpha = 0.6;
  float beta = 0.4;

  // equação para cálculo de nível de stress (média ponderada)
  float stress = (alpha * HR_norm + beta * GSR_norm) * 100.0;
  return stress;
}
